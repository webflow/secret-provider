/*
 *
 *  * Copyright 2017-2020 Lenses.io Ltd
 *
 */

import org.gradle.crypto.checksum.Checksum

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.org.gradle.crypto:checksum:1.4.0"
    }
}

plugins {
    id "com.github.maiflai.scalatest" version "0.26"
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "net.researchgate.release" version "2.8.1"
    id 'org.gradle.crypto.checksum' version '1.4.0'
}


allprojects {
    group = 'io.lenses'
    version = project.version
    description = "connect-secret-provider"

    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.github.maiflai.scalatest'
    apply plugin: "org.gradle.crypto.checksum"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    ext {
        scalaMajorVersion = "2.12"
        scala = "2.12.10"
        scalaCheck = "1.14.3"
        scalaLoggingVersion = "3.9.2"
        kafkaVersion = "2.5.0"
        vaultVersion = "5.1.0"
        azureVersion = "1.22.0"
        azureKeyVaultVersion = "4.1.1"
        azureIdentityVersion = "1.0.5"
        awsSecretsVersion = "1.11.762"

        //test
        scalaTest = "3.1.1"
        mockitoVersion = "1.13.0"
        pegDownVersion = "1.1.0"
        slf4jVersion = "1.7.26"
        commonsIOVersion = "1.3.2"
        jettyVersion = "9.4.19.v20190610"
        testContainersVersion = "1.12.3"
        flexmarkVersion = "0.35.10"

        gitCommitHash = ("git rev-parse HEAD").execute().text.trim()
        gitTag = ("git describe --abbrev=0 --tags").execute().text.trim()
        gitRepo = ("git remote get-url origin").execute().text.trim()
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    jar {
        manifest {
            attributes(
                    "Version": project.version,
                    "Kafka-Version": "${kafkaVersion}",
                    "Created-By" : "Lenses",
                    "Created-At" : new Date().format("YYYYMMDDHHmm"),
                    "Git-Repo": "${gitRepo}",
                    "Git-Commit-Hash": "${gitCommitHash}",
                    "Git-Tag": "${gitTag}",
                    "Docs" : "https://docs.lenses.io/connectors/"
            )
        }
    }

    shadowJar {
        archiveFileName = "${project.name}-${project.version}-all.jar"
        zip64 true
        mergeServiceFiles()

        manifest {
            attributes(
                    "Version": project.version,
                    "Kafka-Version": "${kafkaVersion}",
                    "Created-By" : "Lenses",
                    "Created-At" : new Date().format("YYYYMMDDHHmm"),
                    "Git-Repo": "${gitRepo}",
                    "Git-Commit-Hash": "${gitCommitHash}",
                    "Git-Tag": "${gitTag}",
                    "Docs" : "https://docs.lenses.io/connectors/"
            )
        }

        dependencies {
            exclude(dependency("org.apache.avro:.*"))
            exclude(dependency("org.apache.kafka:.*"))
            exclude(dependency("io.confluent:.*"))
            exclude(dependency("org.apache.kafka:.*"))
            exclude(dependency("org.apache.zookeeper:.*"))
        }
    }

    dependencies {
        compile "org.scala-lang:scala-library:${scala}"
        compile "org.scala-lang:scala-compiler:${scala}"
        compile "com.typesafe.scala-logging:scala-logging_${scalaMajorVersion}:${scalaLoggingVersion}"
        compile "org.apache.kafka:connect-api:${kafkaVersion}"
        compile "com.bettercloud:vault-java-driver:${vaultVersion}"
        compile "com.azure:azure-security-keyvault-secrets:${azureKeyVaultVersion}"
        compile "com.azure:azure-identity:${azureIdentityVersion}"
        compile "com.amazonaws:aws-java-sdk-secretsmanager:${awsSecretsVersion}"
        compile "com.amazonaws:aws-java-sdk-sts:${awsSecretsVersion}"

        testImplementation "org.mockito:mockito-scala_${scalaMajorVersion}:${mockitoVersion}"
        testImplementation "org.scalacheck:scalacheck_${scalaMajorVersion}:${scalaCheck}"
        testImplementation "org.scalatest:scalatest_${scalaMajorVersion}:${scalaTest}"
        testImplementation "org.eclipse.jetty:jetty-server:${jettyVersion}"
        testImplementation "org.apache.commons:commons-io:${commonsIOVersion}"
        testImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
        testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"
        testImplementation "org.pegdown:pegdown:${pegDownVersion}"
        testImplementation "com.vladsch.flexmark:flexmark-all:${flexmarkVersion}"
    }

    test {
        minHeapSize '256m'
        maxHeapSize '2048m'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        archiveFileName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task scaladocJar(type: Jar) {
        classifier = 'scaladoc'
        from '../LICENSE'
        from scaladoc
    }

    task compile(dependsOn: 'compileScala')

    task fatJar(dependsOn: [test, shadowJar])

    task createChecksums(type: Checksum, dependsOn: 'shadowJar') {
      files = fileTree(dir: "build/libs").matching {
        exclude "**/*.sha256"
      }
      outputDir = new File("build/libs")
      algorithm = Checksum.Algorithm.SHA256
    }

    artifacts {
        archives javadocJar
        archives scaladocJar
        archives sourcesJar
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }
}

project.tasks.compileScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]
project.tasks.compileTestScala.scalaCompileOptions.additionalParameters = ["-target:jvm-1.8"]
